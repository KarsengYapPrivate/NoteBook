//CP//
?host_id=31ad90212fc196e9da20a0472d146a38&access_token=a63988e859462fd4c20a03384efc11dc&lang=en-US
https://st-cr.crowdplaygaming.com/lobby/home
383demo01-10 abcd1234

commenH5
staging - https://duplomex.s3.ap-southeast-1.amazonaws.com/logo-gif/staging/CP/commonH5Script.js
prod - https://config.go888king.com/production/cp/commonH5Script.js


// 現在欠的東西
rabbit 
- all animation
- free game handle
- resume game
- music
- respin symbol 要亮回来
- rabbit fighting 要换layer

//ISJ//

Create new game list from BO
----------------------------------------

1. Setting -> go to Global setting -> game list ->
- follow others game id and game name

2. go to Operating Management -> Operator
- click on Actions -> Update -> Jackpot/Pool Settings -> click on Edit -> click on Apply once to make sure game is init

squidgame jackpot pool open (pentajeu, demo player)
go888king.com jackpot pool open (pentajeu, demo player)


3. Operator Setting -> AWP 3.0 Setting -> press + on game list -> add game name

egame socket new game add
----------------------------
- app2  
- plunderpurate.js
- paylines
- reel_symbols
- slots_process
- game_jackpot_config
- slotchecker -> game_payout_list (Number for Game Code) // 应该是没有用了
-need check aoak_paytable (if any of the aoak game)

-pt-lobby 
-Game need to be on inside BO Game ON/OFF (operator setting)

pm2l | grep bacca use for filter

server 改code
ebingo-staging:~/programs/baccarat-socket/baccarat_socket
vim app.js:
: 去到你要改的那行
i 是insert 然后esc 退出
:wq 是save
:q 是exit
:q! force exit (no save exit)
restart server

/>>> search merge conflict
dd delete row


-workbranch

workbranch set up
ssh 进去 Host
cd/program/baccarat-socket/baccarat_API
cat .env
user name : ebingo_admin
password : m0nvryplU5DfTSV0r3fQ
mysql hostname : ebingo-staging.cn5gspq2fnua.ap-southeast-1.rds.amazonaws.com

- gametype update game id
-global_event_config config value的名字要和 egamesocket app2 的switch case 里面 的value 名字一样
-game type;

upload new game folder 
1 upload build file
2 bo/staging/image/slot_icon/upload image

//e-game-socket的一些讲解//
e-gaming-socket
slot.varible 的slot is go to slot process, slot.slot.varible second slot is go to the slot script.
inside slot_processs
that.varible this variable can be create by app2
//

//SlotCore的一些讲解//
slotcore 改script而已不用replace meta, 但是加新的script需要加上meta

//start-http-server.bat//
用来host一个index html的server
npm i -g http-server
double click 这个start-http-server.bat
开google type http://127.0.0.1:8888/ 然后选要host的folder
//

//tinypng access key//
tFgVB7RCXV7xFs7l9fC2kBPtbK0M6N6G
gvGFHvTJ2DBQ8tCB1fJ4pz3QfJXDZyTF
2WfVd90KG1klknyNnKHvF2CQm6y98ctL
2bmrvZLrTg6X3fCc35bTd5RkvNsTg0hp
9v8hMNnnPT136VdSh4353xpNbVlhxRzs
LG82ddf4BhC2LP84BbmFfQsfgFCyzDqj
C36HgC2km76bNBLWQBP7m2Rz3m2YcKcB
h7044SjH5jvSwt33lM2Q81GWCltmsHmf
//

//update BE logic//
xingaming

------
search :C/yourname/.ssh (git bash .ssh)
..will need to change the config folder value depend on the server upload
//this config folder is for xin gaming//
Host xin-bastion

        HostName 13.250.136.231

        User ubuntu

        IdentityFile ~/.ssh/XIN.pem
//

//this config folder is for playtech
Host playtech-office-dev
    HostName 13.214.6.105
    User ubuntu
	IdentityFile ~/.ssh/playtech.pem
//

****./socketserver.sh

git bash on .ssh 

->  e.g: ssh (squid-stg-newgit st) server name from Hostyes

for xin gaming
-> ./socketserver.sh

-> # cd pm2-processes/staging/e-games-socket

-> # ls

-> git branch

-> # git stash

-> # git pull origin test-cluster / playtech-dev

-> # git stash pop (to show previous stash)

-># pm2 list

-> # pm2 restart e-games-socket

-># pm2 log 2

to log player spinning game
//

resumeFreespin Jinghua way
app.js customFeatureGameList 加 gamecode
slot_processs customFeatureGame 加 gamecode
game logic 加 feature data

//SCMS
log in scms
playtech-001 ... -> zip folder -> edit and reupload the folder need to replace
click playtech -> gameasset -> edit -> update

postman -> fetch get dev fetch api -> headers value 改成我要的api

PT prodcution S3 : PT - production

PT Staging S3 : production
https://debug.infozutek.net/test_secret.html
 
PT Dev Lobby (require vpn) S3 : PT - Staging
https://850039-trtpgint.extdev.eu/
 
Internal Dev Panel
https://demo.playtechgamers.com/demo

在BO side new game update should add in awp3.0 for isj (isj staging) and playtech-dev (pt lobby);

Clear free spin record
workbranch

- users table
- SELECT * FROM playtech.users where username = "isj_demo_player_JPY";
- user_setting
- SELECT * FROM playtech.user_settings where user_id = 29736 and config_tag = "vg-001";
- delete config_value

- Slotify Set Up
test-bo.slotify.online
masteradm
abcd1234
update game
include game info file
upload zip folder
game file replace use index and game info

- baccarat

-Prisma
For game side use to do the mysql table view
npx prisma migrate dev --create-only --name add_model_jogodobicho_session_info --schema=Jogodobicho_API/prisma/schema.prisma
npx prisma migrate dev --create-only --name result_and_bet_result_change_value_long_text --schema=prisma/schema.prisma
// name = to github comment
// schema = path of schema.prisma;

-migration.sql
ALTER TABLE `games` ADD COLUMN `bet_type_group` VARCHAR(191) NULL DEFAULT '' AFTER `sub_category`;;
-after... 用来排版

npx prisma migrate deploy --schema=prisma/schema.prisma
deploy 是用来up 上去 mysql (dbtable)

npx prisma generate --schema prisma/main/schema.prisma
npx prisma generate --schema prisma/schema.prisma
generate 用来connect 我的dbvalue to 我socket 本身的class variable

Setup Up socket
-download gitignore
-setup package.json
    -npm init
    -entry point : app.js
    -test command : node app.js
-npm install dotenv

-API : 很像prefab这样 做logic的
-Socket : 很像scene这样 call api用的

-api folder
create .env and .env.exapmle example is for dev push into server git
-node_env 算是你拿来决定开发环境的一个variable //可以不set up
-port 是你script的接口
-IS_ENCRYPT 我们的emit 和 recive data 需要encrypt没有
-database url : 我进mysql的凭证 user name , password , url;
-INTERNAL_GRPC_ENDPOINT : bov2 的endpoint;

package.json
terminal npm install
"@grpc/grpc-js": "^1.11.0", google 允许客户端直接调用服务器上的函数
"@grpc/proto-loader": "^0.7.13", 把 .proto 文件 → 加载成 Node.js 可用的服务结构
"@prisma/client": "^5.16.2", 用给db的data
"@socket.io/cluster-adapter": "^0.2.2", 确保全部socket可以接到同一个消息
"@socket.io/sticky": "^1.0.4", 确保我的东西一直connect去同一个socket
"dotenv": "^16.5.0", 加载 .env 文件中的环境变量到 process.env
"express": "^5.1.0", 轻量级 web 框架
"joi": "^17.13.3", 是一个强大的 JavaScript 数据验证库，常用于 对请求数据（如 API 参数、表单数据）进行格式验证。
"socket.io": "^4.5.0", 是一个用于 实现 Web 实时通信(WebSocket) 的 Node.js 库，支持客户端和服务器之间双向、事件驱动的通信。
"socket.io-client": "^4.7.5" 是 socket.io 的 客户端库，通常运行在浏览器（或 Node.js 客户端）中，用于连接服务器端 socket.io 实例，实现实时通信功能。

app.js
base of app.
require('dotenv').config();
const port = process.env.PORT_API; 
const express = require('express'); 使用 Express 创建 HTTP 服务
const app = express();
const cluster = require('cluster'); Node.js 原生模块，用于创建多进程（多核）服务，即 Cluster 模式，提升性能。
const numCPUs = require('os').cpus().length; 获取当前机器的 CPU 核心数，常用于决定要启动多少个 Worker（子进程）。
const { setupMaster, setupWorker } = require('@socket.io/sticky'); setupMaster()：在主进程中设置粘性会话支持 setupWorker()：在 Worker 子进程中初始化 socket.io
const { createAdapter, setupPrimary } = require('@socket.io/cluster-adapter'); 引入 cluster-adapter，让多个 Worker 之间的 Socket.IO 实例可以通信（广播消息等）
const { body, validationResult } = require('express-validator'); 引入 express-validator 中的工具，用于验证请求参数，如登录注册表单字段是否有效。
const auth = require('./services/auth.js');
const Joi = require('joi');

app.use(express.json());

if (cluster.isMaster) { //create fork 如果不是master 通常是不会动到的
    //console.log(`Master ${process.pid} is running`);

    for (let i = 0; i < numCPUs; i++) {
        cluster.fork();
    }

    cluster.on('exit', (worker) => {
        //console.log(`Worker ${worker.process.pid} died`);
        cluster.fork();
    });
} else {
    //console.log(`Start Master ${process.pid} is running`);

    // let server = require('http').Server(app);
    app.listen(port, () => {
        //console.log('Example App listenting on port', port);
    });

    app.get('/', (req, res) => {
        res.send('Hellow World!');
    });
}

as api. post function req 是我从server拿到data res是我拿到data过后send给client 我是中间人。

schema.prisma
Set up for prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

XAMPP download //use to setup local db
apache and mysql start

root：默认用户名

@localhost:3306：本地连接
playtech：你刚创建的数据库名
密码为空（默认 XAMPP 没有设密码）
如果你设置了密码，例如 123456，则写：
DATABASE_URL="mysql://root:123456@localhost:3306/playtech"

Clone script from local to server github.
ssh the server
get into program
git clone https://github.com/用户名/仓库名
cd into the socket you clone then npm install.
cp .env.example .env
.env 里面的 database_url to db link

cd into api folder
npx prisma migrate de

api - socket - player

api.post 
-req socket send api 的 Request
-res api send 给socket 的 Response

pm2 start app.js --name=jogodobicho-api --time  把东西放进pm2 list 里面
cd /etc/nginx 还是要找nginx
cd sites-avaible
ls
cat DEFAULT 
vim default

shift g 可以跳到最下面

copy server object

server {

        listen 80;
        server_name jogodobicho-api.bochap.net;

        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since' always;

        location / {

                client_max_body_size 200M;
                proxy_pass http://127.0.0.1:7700;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header Origin $http_origin;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_cache_bypass $http_upgrade;
                proxy_hide_header X-Powered-By;
        }

        access_log /var/log/nginx/jogodobicho-api.log;
}
change access log , server name and porxy pass port Number

sudo nginx -t
sudo service nginx reload

prisma update 一个model

Remote - SSH
[
    {"animal" : [1]},
    {"animal" : [1 ,2]},
    {"animal" : [1 ,2 ,4]},
    {"animal" : [1 ,2 ,4 ,23]},
    {"animal" : [1 ,2 ,4 ,23,15]},
    {'number' : '1234'}
    {'number' : '123'}
    {'number' : '12'}
]

[
  { index: 1, betWin: 3, animalWin: [ 2 ] },
  { index: 2, betWin: 9, animalWin: [ 2, 4 ] },
  { index: 3, betWin: 1.5, animalWin: [ 2, 4 ] },
  { index: 4, betWin: 1, animalWin: [ 2, 4 ] },
  { index: 7, betWin: 1 }
]

const redis = invisible BO to store data for global value

// use to get player IP
const forwarded = socket.handshake.headers['x-forwarded-for']
const ip = forwarded ? forwarded.split(',')[0].trim() : socket.handshake.address

exapmle x-forwarded-for: 123.45.67.89, 10.0.0.1
will get 123.45.67.89

lock button need to lock the bet value after new game.

get result
-要去到enter result

买
-厨
-SSD
-Monitor
-荧幕
-椅子

HandOver 
-Jogo frontend 
-Big win presenter
-Hot and cold feature
-Tutorial

-VG-002
-Bug fixed 
-Use Reel Engine as the submodule
-Build in bov2

-PT 001 playtech version
-No submodule
-Build in bov1

-PT 004 playtech version
-No submodule
-Build in bov1

-PT 005 playtech version
-No submodule
-Build in bov1

-PT 006 playtech version
-No submodule
-Build in bov1

-PT 007 playtech version
-No submodule
-Build in bov1

-PT 008 playtech version
-No submodule
-Build in bov1

-PT 009 playtech version
-No submodule
-Build in bov1

All pt game need to put the build file inside S3 (playtech pop staging/ptSlot/Game)
Need to copy game_info.js from ptslot-001 folder.
change the game_info game_name value and the window.scmsAPIKey.
window.scmsAPIKey will get from scms folder. Remember to encrypt the key. Any question can ask TZ.
Replace the index.html from ptslot-001 also and change the title.

Create the different rtp folder for pt game with the example inside (playtech pop staging/ptSlot)
Will need to create 4 folder for pt which is normal game folder , 92 , 94 , 96 folder.
Every Folder inside will have index.html.
Inside Index.html need to change the gamePath value to the build file you point to.
gameCode value will need to get the value you create in bov1 and encrypt it before you change.

Need to do the invalidation with the aws account.

After the staging game finish bug fixed. Next progress is to copy the different rtp folder and the game build file to (playtech pop/pt-lobby)
After build to pt-lobby need to inform jeff. After jeff say ok, then need to inform QA to test the IAT test that require by pt side.
Everything done then jeff will inform to put the game to (playtech pop/pt-staging)
Then only to (playtech pop/pt-production)

For pt backend will need to create four gameCode.

Ante Bet change to number , not going to use boolean
Ante bet value need to change follow by bet
Freespin Selection feature
Rule page 
Sound effect
Debug
turbo spin 

zhenyi
symbol appear , bg destroy spine animation

